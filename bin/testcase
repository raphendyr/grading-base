#!/bin/sh

_testcase_error() {
    if { >&9; } 2>&-; then
        echo "[${0##*/}] $@" >&9
    else
        echo "[${0##*/}] $@" >&2
    fi
}

_testcase_usage() {
    if { >&9; } 2>&-; then
        echo "usage: $0 [-t title] [-p points_on_success] [-s skip] [prog] [arg1] [arg2...]" >&9
    else
        echo "usage: $0 [-t title] [-p points_on_success] [-s skip] [prog] [arg1] [arg2...]" >&2
        echo " -t title   | title (display name) for this test" >&2
        echo " -p points  | if test returns 0, then we give so many points for this test, else 0" >&2
        echo "            |Â if there is no program to execute, then points is used as max points for 'points' command" >&2
        echo " -s skip    | if not 0, then skip execution of this test. $0 will return with skip as the exit code" >&2
    fi
}


testcase() {
    local points res skip title

    if [ "${EUID:-${UID:-$(id -u)}}" -ne 0 ]; then
        echo "ERROR: '${0##*/}' must be run as root" | \
            { { cat >&9; } 2>&- || cat >&2; }
        exit 64 # EX_USAGE
    fi

    if [ "${OUTPUT_IS_CAPTURED:-}" = 'yes' ]; then
        echo "ERROR: '${0##*/}' can not be run inside 'capture'" | \
            { { cat >&9; } 2>&- || cat >&2; }
        exit 64 # EX_USAGE
    fi

    # Read arguments
    title=""
    points=0
    skip=0
    while [ $# -gt 0 ]; do
        case "$1" in
            -t|-n) title=$2 ;;
            -p) points=$2 ;;
            -s|-e) skip=$2 ;;
            --) shift ; break ;;
            -*)
                _testcase_error "ERROR: Invalid option $1"
                usage
                return 64 # EX_USAGE
                ;;
            *) break ;;
        esac
        shift 2
    done

    if [ "${TESTCASE_EXECUTED:-}" = 'yes' -a $# -eq 0 ]; then
        _testcase_error "ERROR: the 'prog' is required when testcase is executed as a command"
        _testcase_usage
        _testcase_error "To use the context syntax, then add the following to the script: '. ${0##*/}'"
        return 64 # EX_USAGE
    fi

    # Acquire a testcase directory
    TESTCASE_ACTIVE=0
    TESTCASE_DIR=/feedback/$(printf "%02d" $TESTCASE_ACTIVE)
    while ! mkdir "$TESTCASE_DIR" 2>/dev/null; do
        if [ ! -e "$TESTCASE_DIR" ]; then
            _testcase_error "Failed to acquire '$TESTCASE_DIR' for the testcase"
            return 73 # EX_CANTCREAT
        fi
        TESTCASE_ACTIVE=$((TESTCASE_ACTIVE + 1))
        TESTCASE_DIR=/feedback/$(printf "%02d" $TESTCASE_ACTIVE)
    done
    export TESTCASE_ACTIVE TESTCASE_DIR

    # Init testcase directory
    echo "0" > "$TESTCASE_DIR/points"
    echo "$points" > "$TESTCASE_DIR/max_points"
    [ "$title" ] && echo "$title" > "$TESTCASE_DIR/title"

    # If skip is not 0, then exit
    if [ "$skip" -a "$skip" -ne 0 ]; then
        echo "skipped" > "$TESTCASE_DIR/status"
        return $skip
    fi

    if [ $# -gt 0 ]; then
        # Run the actual test
        capture -- "$@"
        res=$?
        points -s $res
        # testcase has completed, unset vars
        unset TESTCASE_ACTIVE TESTCASE_DIR
        return $res
    else
        return 0
    fi
}

if [ "${0%/bin/testcase}" != "$0" ]; then
    # Pretty sure someone executed this file, so call the function
    TESTCASE_EXECUTED=yes
    testcase "$@"
    exit $?
fi
